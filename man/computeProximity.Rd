% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cpp_functions.R
\name{computeProximity}
\alias{computeProximity}
\title{Compute Proximity Matrix}
\usage{
computeProximity(data, proxType, side, isContainMissingValue)
}
\arguments{
\item{data}{A numeric matrix with n rows and p columns. Each row typically represents an observation.}

\item{proxType}{An integer specifying the type of proximity measure to use.}

\item{side}{An integer indicating the direction for computing proximity.}

\item{isContainMissingValue}{An integer indicating whether the input data contains missing values.}
}
\value{
A square matrix representing the proximity between rows or columns, depending on the selected side.
}
\description{
This function takes a numeric matrix and computes a square proximity matrix (similarity or distance) based on a specified method.
}
\details{
\strong{proxType}

Available proxType options include:

\itemize{
\item \code{0}: Euclidean
\item \code{1}: Pearson correlation
\item \code{2}: Kendall correlation
\item \code{3}: Spearman correlation
\item \code{4}: Adjusted tangent correlation (atancorr)
\item \code{5}: City-block (Manhattan) distance
\item \code{6}: Absolute Pearson correlation
\item \code{7}: Uncentered correlation
\item \code{8}: Absolute uncentered correlation
\item \code{20}: Hamman similarity (binary)
\item \code{21}: Jaccard index (binary)
\item \code{22}: Phi coefficient (binary)
\item \code{23}: Rao coefficient (binary)
\item \code{24}: Rogers-Tanimoto similarity (binary)
\item \code{25}: Simple matching coefficient (binary)
\item \code{26}: Sneath coefficient (binary)
\item \code{27}: Yule's Q (binary)
}

Ensure the data type matches the selected method. For example, binary methods should only be used on binary (0/1) data.

\strong{side}

Use \code{0} for row-wise proximity and \code{1} for column-wise proximity.

\strong{isContainMissingValue}

Set to \code{1} if the input data includes missing values; otherwise, use \code{0}.
}
\examples{
# =======================
# Example 1: Crabs dataset with distance method (Euclidean distance)
# =======================
# Step 1: Compute proximity matrix
if (requireNamespace("MASS", quietly = TRUE)) {
  df_crabs <- as.matrix(MASS::crabs[, -c(1:3)])  # Use continuous variables only
  row_prox_crabs <- computeProximity(
    data = df_crabs,
    proxType = 0,               # 0 = Euclidean distance
    side = 0,                   # 0 = row-wise proximity
    isContainMissingValue = 0
  )

  # Step 2: Obtain R2E ordering
  r2e_order_crabs <- ellipse_sort(row_prox_crabs)  # R2E ordering

  # Step 3: Apply AVG-R2E ordering
  hctree_result_crabs <- hctree_sort(
    row_prox_crabs,                   # use distance matrix directly
    externalOrder = r2e_order_crabs,  # apply r2e order
    orderType = 2,                    # 2 = Average-linkage
    flipType = 1                      # 1 = Flip based on externalOrder
  )

  avg_r2e_order_crabs <- hctree_result_crabs$order + 1

  # Inspect results
  avg_r2e_order_crabs
}

# =======================
# Example 2: Crabs dataset with distance method (Pearson correlation)
# =======================
if (requireNamespace("MASS", quietly = TRUE)) {
  df_crabs <- as.matrix(MASS::crabs[, -c(1:3)])  # Use continuous variables only
  row_prox_pearson <- computeProximity(
    data = df_crabs,
    proxType = 1,               # 1 = Pearson correlation (internally 1 - cor)
    side = 0,                   # 0 = row-wise proximity
    isContainMissingValue = 0
  )

  # Step 2: Obtain R2E ordering
  r2e_order_pearson <- ellipse_sort(row_prox_pearson)  # R2E ordering

  # Step 3: Inspect results
  dist_pearson <- as.dist(1 - row_prox_pearson) # convert correlation matrix to distance matrix
  dist_pearson_MT <- as.matrix(dist_pearson)

  hctree_result_pearson <- hctree_sort(
    dist_pearson_MT,                    # use distance matrix directly
    externalOrder = r2e_order_pearson,  # apply r2e order
    orderType = 2,                      # 2 = Average-linkage
    flipType = 1                        # 1 = Flip based on externalOrder
  )

  avg_r2e_order_pearson <- hctree_result_pearson$order + 1

  # Inspect results
  avg_r2e_order_pearson
}
}
